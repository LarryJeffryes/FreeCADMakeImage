From cc1119c43b7633fc6c36b9d09726e6e01bef9a79 Mon Sep 17 00:00:00 2001
From: "Zheng, Lei" <realthunder.dev@gmail.com>
Date: Fri, 5 Jun 2020 21:40:53 +0800
Subject: [PATCH] Refactor smoothBorder in SoShadowGroup

The original implementation uses gaussian blur for pre-filtering the
shadow map. The code has a few problems. The commit fixed it and
greatly improved performance by using separable filtering, i.e. a two
pass filtering in horizontal and vertical direction. The first pass
reads the shadow map texture, and outputs to gaussmap texture. The
second pass reads the gaussmap texture, and output back the shadow map.
(reference: http://rastergrid.com/blog/2010/09/efficient-gaussian-blur-with-linear-sampling/)

A future improvement may replace the gaussian blue with'Summed Area Table'.
http://www.shaderwrangler.com/publications/sat/SAT_EG2005.pdf

'smoothBorder' now uses the integer and the first fractional digits to
control the filter radius.

In addition to pre-filtering with gaussian blue, which is mostly only
for border smoothing, a post-filter is also implemented in this patch
that filters while doing shadow rendering. It is mostly used for soft
shadow rendering. The implementation is inspired by the book 'Computer
Graphics Programming in OpenGL with C++' by V. Scott Gordon, John L.
Clevenger.

https://books.google.com.sg/books?id=GomCDwAAQBAJ&lpg=PT290&vq=soft%20shadow&pg=PT298#v=onepage&q&f=false

The sampling is done in shadow rendering fragment shader. The second
fractional digit of smoothBorder feild is used to control the sampling
size. When the digit is 0, the filter uses 2x2 samples with dithering.
From there onwards, digit*2+1 specifies a box size for box filtering,
e.g. 1 means a cube of 3x3, and 2 for 5x5, etc, up to maximum 8x8.

The third+ digits of smoothBorder determine the shadow spread i.e.
penumbra size. Note that in case of spot light, the penumbra size will
be scaled by perspective projection, which will make it bigger the
further the sahdow is from the light source, which is what real shadows
do.

There is a shortcoming of the current implementation. The shadow spread
is dependent on the texture matrix. In other words, the higher the scale
implied by texture mapping, the smaller the spread shall be used. A
spread that is too big will produce incorrect shadows.
---
 src/shadows/SoShadowGroup.cpp | 314 ++++++++++++++++++++++++----------
 1 file changed, 220 insertions(+), 94 deletions(-)

diff --git a/src/shadows/SoShadowGroup.cpp b/src/shadows/SoShadowGroup.cpp
index 20382aac9..ca13ba206 100644
--- a/src/shadows/SoShadowGroup.cpp
+++ b/src/shadows/SoShadowGroup.cpp
@@ -271,6 +271,9 @@
 // use to increase precision by one bit at the cost of some extra processing
 #define USE_NEGATIVE 1
 
+// use box filter instead of gaussian blur.
+// #define USE_BOX_FILTER 1
+
 // *************************************************************************
 
 #include <FXViz/nodes/SoShadowGroup.h>
@@ -352,8 +355,7 @@ public:
                      SoShadowGroup * sg,
                      SoNode * scene,
                      SoNode * bboxscene,
-                     const int gausskernelsize,
-                     const float gaussstandarddeviation)
+                     const float smoothing)
   {
     const cc_glglue * glue = cc_glglue_instance(SoGLCacheContextElement::get(state));
 
@@ -383,6 +385,9 @@ public:
     this->vsm_farval = NULL;
     this->vsm_nearval = NULL;
     this->gaussmap = NULL;
+    this->gaussscene = NULL;
+    this->smoothing = 0.0f;
+    this->depthmapid = 0;
     this->texunit = -1;
     this->bboxnode = new SoSeparator;
     this->bboxnode->ref();
@@ -480,23 +485,12 @@ public:
     this->depthmapscene->ref();
     this->matrix = SbMatrix::identity();
 
-    if (gausskernelsize > 0) {
-      this->gaussmap = new SoSceneTexture2;
-      this->gaussmap->ref();
-      this->gaussmap->transparencyFunction = SoSceneTexture2::NONE;
-      this->gaussmap->size = SbVec2s(TEXSIZE, TEXSIZE);
-      this->gaussmap->wrapS = SoSceneTexture2::CLAMP_TO_BORDER;
-      this->gaussmap->wrapT = SoSceneTexture2::CLAMP_TO_BORDER;
-
-      this->gaussmap->type = SoSceneTexture2::RGBA32F;
-      this->gaussmap->backgroundColor = SbVec4f(1.0f, 1.0f, 1.0f, 1.0f);
-
-      SoShaderProgram * shader = this->createGaussFilter(TEXSIZE, gausskernelsize, gaussstandarddeviation);
-      this->gaussmap->scene = this->createGaussSG(shader, this->depthmap);
-    }
+    updateGaussMap(smoothing);
   }
+
   ~SoShadowLightCache() {
     if (this->depthmapscene) this->depthmapscene->unref();
+    if (this->gaussscene) this->gaussscene->unref();
     if (this->bboxnode) this->bboxnode->ref();
     if (this->maxshadowdistance) this->maxshadowdistance->unref();
     if (this->dropoffrate) this->dropoffrate->unref();
@@ -515,6 +509,36 @@ public:
     if (this->camera) this->camera->unref();
   }
 
+  void updateGaussMap(float smoothing)
+  {
+    smoothing = floor((smoothing+1e-6)*10.0f);
+    if (!this->depthmap || smoothing == this->smoothing) return;
+    this->smoothing = smoothing;
+    if (this->gaussmap) {
+      this->gaussmap->unref();
+      this->gaussmap = NULL;
+    }
+    if (smoothing > 0.0f) {
+      this->gaussmap = new SoSceneTexture2;
+      this->gaussmap->ref();
+      this->gaussmap->transparencyFunction = SoSceneTexture2::NONE;
+      this->gaussmap->size = this->depthmap->size.getValue();
+      this->gaussmap->wrapS = SoSceneTexture2::CLAMP_TO_BORDER;
+      this->gaussmap->wrapT = SoSceneTexture2::CLAMP_TO_BORDER;
+
+      SoTransparencyType * tt = new SoTransparencyType;
+      tt->value = SoTransparencyType::NONE;
+      this->gaussmap->sceneTransparencyType = tt;
+
+      this->gaussmap->type = SoSceneTexture2::RGBA32F;
+      this->gaussmap->backgroundColor = SbVec4f(1.0f, 1.0f, 1.0f, 1.0f);
+
+      this->gaussmap->scene = this->createGaussSG(smoothing, true, this->depthmap);
+      this->gaussscene = this->createGaussSG(smoothing, false, this->gaussmap);
+      this->gaussscene->ref();
+    }
+  }
+
   static int
   write_short(FILE * fp, unsigned short val)
   {
@@ -584,20 +608,23 @@ public:
   static void shadowmap_glcallback(void * closure, SoAction * action);
   static void shadowmap_post_glcallback(void * closure, SoAction * action);
   void createVSMProgram(void);
-  SoShaderProgram * createGaussFilter(const int texsize, const int size, const float stdev);
-  SoSeparator * createGaussSG(SoShaderProgram * program, SoSceneTexture2 * tex);
+  SoShaderProgram * createGaussFilter(float smoothing, bool horizontal);
+  SoSeparator * createGaussSG(float smoothing, bool horizontal, SoSceneTexture2 * tex);
 
   SbMatrix matrix;
   SoPath * path;
   SoLight * light;
   SoSceneTexture2 * depthmap;
   SoNode * depthmapscene;
+  SoNode * gaussscene;
   SoSceneTexture2 * gaussmap;
   SoCamera * camera;
   float farval;
   float nearval;
   int texunit;
   int lightid;
+  uint32_t depthmapid;
+  float smoothing;
 
   SoSeparator * bboxnode;
   SoShaderProgram * vsm_program;
@@ -964,18 +991,10 @@ SoShadowGroupP::updateShadowLights(SoGLRenderAction * action)
   int i;
   SoState * state = action->getState();
 
+  float smoothing = PUBLIC(this)->smoothBorder.getValue();
+
   if (!this->shadowlightsvalid) {
     int lightidoffset = SoLightElement::getLights(state).getLength();
-    float smoothing = PUBLIC(this)->smoothBorder.getValue();
-    smoothing = 0.0f; // FIXME: temporary until we have time to fix this feature
-
-    int gaussmatrixsize = 0;
-    float gaussstandarddeviation = 0.6f;
-
-    // just hardcode some values for now
-    if (smoothing > 0.9) gaussmatrixsize = 7;
-    else if (smoothing > 0.5) gaussmatrixsize = 5;
-    else if (smoothing > 0.01) gaussmatrixsize = 3;
 
     const cc_glglue * glue = cc_glglue_instance(SoGLCacheContextElement::get(state));
 
@@ -1055,8 +1074,7 @@ SoShadowGroupP::updateShadowLights(SoGLRenderAction * action)
                                                               PUBLIC(this),
                                                               scene,
                                                               bboxscene,
-                                                              gaussmatrixsize,
-                                                              gaussstandarddeviation);
+                                                              smoothing);
           cache->lightid = id++;
           this->shadowlights.append(cache);
         }
@@ -1101,6 +1119,7 @@ SoShadowGroupP::updateShadowLights(SoGLRenderAction * action)
       this->matrixaction.apply(cache->path);
       this->updateDirectionalCamera(state, cache, this->matrixaction.getMatrix(), FALSE);
     }
+    cache->updateGaussMap(smoothing);
     assert(cache->texunit >= 0);
     assert(cache->lightid >= 0);
     SoTextureUnitElement::set(state, PUBLIC(this), cache->texunit);
@@ -1363,7 +1382,19 @@ SoShadowGroupP::renderDepthMap(SoShadowLightCache * cache,
                                SoGLRenderAction * action)
 {
   cache->depthmap->GLRender(action);
-  if (cache->gaussmap) cache->gaussmap->GLRender(action);
+  if (cache->depthmap->scene.getValue() == cache->depthmapscene
+          && cache->gaussmap
+          && cache->depthmap->getNodeId() != cache->depthmapid) {
+    cache->gaussmap->GLRender(action);
+    cache->depthmap->enableNotify(FALSE);
+    cache->depthmap->scene = cache->gaussscene;
+    cache->depthmap->GLRender(action);
+    cache->depthmap->scene.enableNotify(FALSE);
+    cache->depthmap->scene = cache->depthmapscene;
+    cache->depthmap->scene.enableNotify(TRUE);
+    cache->depthmap->enableNotify(TRUE);
+    cache->depthmapid = cache->depthmap->getNodeId();
+  }
 }
 
 namespace {
@@ -1647,6 +1678,11 @@ SoShadowGroupP::setFragmentShader(SoState * state)
 {
   int i;
 
+  int smoothing = 0;
+  float s = PUBLIC(this)->smoothBorder.getValue();
+  if (s > 0)
+    smoothing = int(round(s*1e7)) % 1000000;
+
   SoShaderGenerator & gen = this->fragmentgenerator;
   gen.reset(FALSE);
 
@@ -1708,9 +1744,9 @@ SoShadowGroupP::setFragmentShader(SoState * state)
     }
   }
 
+  SbString str;
   if (numshadowlights) {
 #ifdef DISTRIBUTE_FACTOR
-    SbString str;
     str.sprintf("const float DISTRIBUTE_FACTOR = %.1f;\n", DISTRIBUTE_FACTOR);
     gen.addDeclaration(str, FALSE);
 #endif
@@ -1741,18 +1777,61 @@ SoShadowGroupP::setFragmentShader(SoState * state)
   gen.addMainStatement("vec3 color = perVertexColor;\n"
                        "vec3 scolor = vec3(0.0);\n"
                        "float dist;\n"
+                       "float swidth;\n"
                        "float shadeFactor;\n"
                        "vec3 coord;\n"
                        "vec4 map;\n"
                        "mydiffuse.a *= texcolor.a;\n");
 
+  float swidth = (smoothing % 100000)*5e-5f;
+
   if (perpixelspot) {
+    SbString str;
+    int count;
+#define MAX_OFFSET_COUNT 8
+    float offsets[MAX_OFFSET_COUNT*MAX_OFFSET_COUNT*2];
+    if (smoothing >= 100000) {
+      gen.addMainStatement("vec2 offset = vec2(0.0, 0.0);\n");
+      gen.addMainStatement(str);
+      count = smoothing/100000*2 + 1;
+      if (count > MAX_OFFSET_COUNT) count = MAX_OFFSET_COUNT;
+      int center = count/2;
+      for (int j=0;j<count;++j) {
+        for (int k=0;k<count;++k) {
+            offsets[j*count*2 + k*2] = k-center;
+            offsets[j*count*2 + k*2 + 1] = j-center;
+        }
+      }
+      count *= count;
+    }
+    else if (smoothing) {
+      gen.addMainStatement("vec2 offset = mod(floor(gl_FragCoord.xy),2.0);\n");
+      gen.addMainStatement("offset.y = -offset.y;\n");
+      gen.addMainStatement(str);
+      count = 4;
+      offsets[0] = -1.5f;
+      offsets[1] = 1.5f;
+      offsets[2] = -1.5f;
+      offsets[3] = -0.5f;
+      offsets[4] = 0.5f;
+      offsets[5] = 1.5f;
+      offsets[6] = 0.5f;
+      offsets[7] = -0.5f;
+    }
+    else {
+      gen.addMainStatement("vec2 offset = vec2(0.0, 0.0);\n");
+      count = 1;
+      offsets[0] = 0.0f;
+      offsets[1] = 0.0f;
+      swidth = 0.0f;
+    }
+
     SbBool spotlight = FALSE;
     SbBool dirlight = FALSE;
+
     for (i = 0; i < numshadowlights; i++) {
       SoShadowLightCache * cache = this->shadowlights[i];
       SbBool dirshadow = FALSE;
-      SbString str;
       SbBool normalspot = FALSE;
       SbString insidetest = "&& coord.x >= 0.0 && coord.x <= 1.0 && coord.y >= 0.0 && coord.y <= 1.0)";
 
@@ -1786,20 +1865,35 @@ SoShadowGroupP::setFragmentShader(SoState * state)
           addDirSpotLight(gen, cache->lightid, TRUE);
         }
       }
-      str.sprintf("coord = 0.5 * (shadowCoord%d.xyz / shadowCoord%d.w + vec3(1.0));\n", i , i);
+
+      str.sprintf("swidth = %f;\n", dirshadow?swidth:(swidth*0.1f));
       gen.addMainStatement(str);
-      str.sprintf("map = texture2D(shadowMap%d, coord.xy);\n", i);
+
+      gen.addMainStatement("shadeFactor = 0.0;\n");
+
+      str.sprintf("coord = 0.5 * (shadowCoord%d.xyz / shadowCoord%d.w + vec3(1.0));\n", i , i);
       gen.addMainStatement(str);
+
+      for (int j=0; j<count; ++j) {
+        str.sprintf("map = texture2D(shadowMap%d, coord.xy + "
+                "(vec2(%f,%f)+offset.xy)*swidth*0.001*shadowCoord%d.w);\n",
+                i, offsets[j*2], offsets[j*2+1], i);
+        gen.addMainStatement(str);
 #ifdef USE_NEGATIVE
-      gen.addMainStatement("map = (map + vec4(1.0)) * 0.5;\n");
+        gen.addMainStatement("map = (map + vec4(1.0)) * 0.5;\n");
 #endif // USE_NEGATIVE
 #ifdef DISTRIBUTE_FACTOR
-      gen.addMainStatement("map.xy += map.zw / DISTRIBUTE_FACTOR;\n");
+        gen.addMainStatement("map.xy += map.zw / DISTRIBUTE_FACTOR;\n");
 #endif
-      str.sprintf("shadeFactor = ((map.x < 0.9999) && (shadowCoord%d.z > -1.0 %s) "
-                  "? VsmLookup(map, (dist - nearval%d) / (farval%d - nearval%d), EPSILON, THRESHOLD) : 1.0;\n",
-                  i, insidetest.getString(),i,i,i);
-      gen.addMainStatement(str);
+        str.sprintf("shadeFactor += ((map.x < 0.9999) && (shadowCoord%d.z > -1.0 %s) "
+                "? VsmLookup(map, (dist - nearval%d) / (farval%d - nearval%d), EPSILON, THRESHOLD) : 1.0;\n",
+                i, insidetest.getString(), i, i, i);
+        gen.addMainStatement(str);
+      }
+      if (count > 1) {
+        str.sprintf("shadeFactor /= %d.0;\n", count);
+        gen.addMainStatement(str);
+      }
 
       if (dirshadow) {
         SoShadowDirectionalLight * sl = static_cast<SoShadowDirectionalLight*> (light);
@@ -1885,13 +1979,12 @@ SoShadowGroupP::setFragmentShader(SoState * state)
   }
 
   gen.addMainStatement("if (coin_light_model != 0) { color *= texcolor.rgb; color += scolor; }\n"
-                       // When shading is off, the shadeFactor seems too
-                       // aggressive. The clamp is added here to mix the shadow
-                       // color with the ground. It would be better to expose
-                       // this as an attribute somehow.
+                       // When lighting is off, the shadeFactor seems too aggressive. The clamp
+                       // is added here to mix the shadow color with the ground. It would be better
+                       // to expose this as an attribute somehow.
                        "else color = clamp(shadeFactor,0.5,1.0) * mydiffuse.rgb * texcolor.rgb;\n");
 
-  gen.addMainStatement("if (shadow_alpha != 0.0 && mydiffuse.a == 0.0 && shadeFactor < 1.0) {"
+  gen.addMainStatement("if (shadow_alpha != 1.0 && mydiffuse.a == 0.0 && shadeFactor < 1.0) {"
                             "mydiffuse.a = shadow_alpha;"
                             "color = vec3(clamp(color.r, 0.0, mydiffuse.r),"
                                          "clamp(color.g, 0.0, mydiffuse.g),"
@@ -1927,6 +2020,7 @@ SoShadowGroupP::setFragmentShader(SoState * state)
   }
 
   gen.addMainStatement("gl_FragColor = vec4(color, mydiffuse.a);");
+
   gen.addDeclaration("uniform sampler2D textureMap0;\n", FALSE);
   gen.addDeclaration("uniform int coin_texunit0_model;\n", FALSE);
   gen.addDeclaration("uniform float shadow_alpha;\n", FALSE);
@@ -1946,7 +2040,7 @@ SoShadowGroupP::setFragmentShader(SoState * state)
 
   this->fragmentshader->parameter.setNum(0);
 
-  for (i = 0; i < numshadowlights; i++) {
+  for (int i = 0; i < numshadowlights; i++) {
     SoShadowLightCache * cache = this->shadowlights[i];
 
     SoShaderParameter1i * shadowmap = this->shadowlights[i]->shadowmapid;
@@ -1980,9 +2074,8 @@ SoShadowGroupP::setFragmentShader(SoState * state)
   }
   SoShaderParameter1i * texmap =
     new SoShaderParameter1i();
-  SbString str0;
-  str0.sprintf("textureMap0");
-  texmap->name = str0;
+  str.sprintf("textureMap0");
+  texmap->name = str;
   texmap->value = 0;
 
   SoShaderParameter1i * texmap1 = NULL;
@@ -2009,8 +2102,7 @@ SoShadowGroupP::setFragmentShader(SoState * state)
       this->texunit1->value = 0;
     }
     texmap1 = new SoShaderParameter1i();
-	SbString str;
-	str.sprintf("textureMap1");
+    str.sprintf("textureMap1");
     texmap1->name = str;
     texmap1->value = 1;
   }
@@ -2302,66 +2394,100 @@ SoShadowGroupP::GLRender(SoGLRenderAction * action, const SbBool inpath)
   state->pop();
 }
 
+static inline float gaussian(int d, double sigma2) {
+    return float((1.0 /  sqrt(2.0 * M_PI * sigma2)) * exp(- double(d*d) / (2.0 * sigma2)));
+}
+
 SoShaderProgram *
-SoShadowLightCache::createGaussFilter(const int texsize, const int size, const float gaussstandarddeviation)
+SoShadowLightCache::createGaussFilter(float smoothing, bool horizontal)
 {
   SoVertexShader * vshader = new SoVertexShader;
   SoFragmentShader * fshader = new SoFragmentShader;
   SoShaderProgram * program = new SoShaderProgram;
 
-  SoShaderParameterArray2f * offset = new SoShaderParameterArray2f;
-  offset->name = "offset";
-  SoShaderParameterArray1f * kernel = new SoShaderParameterArray1f;
-  kernel->name = "kernelvalue";
   SoShaderParameter1i * baseimage = new SoShaderParameter1i;
   baseimage->name = "baseimage";
   baseimage->value = 0;
 
-  int kernelsize = size*size;
-
-  offset->value.setNum(kernelsize);
-  kernel->value.setNum(kernelsize);
+  int size = (int(smoothing)+3)/2;
 
   SoShaderGenerator fgen;
   SbString str;
 
-  str.sprintf("const int KernelSize = %d;", kernelsize);
-  fgen.addDeclaration(str, FALSE);
-  fgen.addDeclaration("uniform vec2 offset[KernelSize];", FALSE);
-  fgen.addDeclaration("uniform float kernelvalue[KernelSize];", FALSE);
   fgen.addDeclaration("uniform sampler2D baseimage;", FALSE);
 
-  fgen.addMainStatement(
-                        "int i;\n"
-                        "vec4 sum = vec4(0.0);\n"
-                        "for (i = 0; i < KernelSize; i++) {\n"
-                        "  vec4 tmp = texture2D(baseimage, gl_TexCoord[0].st + offset[i]);\n"
-                        "  sum += tmp * kernelvalue[i];\n"
-                        "}\n"
-                        "gl_FragColor = sum;\n"
-                        );
+#ifdef DISTRIBUTE_FACTOR
+  str.sprintf("const float DISTRIBUTE_FACTOR = %.1f;\n", DISTRIBUTE_FACTOR);
+  fgen.addDeclaration(str, FALSE);
+#endif
 
-  const double sigma = (double) gaussstandarddeviation;
-  const int center = size / 2;
-  const float dt = 1.0f / float(texsize);
+  fgen.addMainStatement("vec2 m = vec2(0.0);\n");
+  fgen.addMainStatement("vec4 map;\n");
+  fgen.addMainStatement(str);
 
-  SbVec2f * offsetptr = offset->value.startEditing();
-  float * kernelptr = kernel->value.startEditing();
+  double sigma2 = size / 3.0;
+  sigma2 *= sigma2;
+  float dt = 1.0f / float(this->depthmap->size.getValue()[0]);
 
-  int c = 0;
-  for (int y = 0; y < size; y++) {
-    int dy = SbAbs(y - center);
-    for (int x = 0; x < size; x++) {
-      int dx = SbAbs(x - center);
+  const char *fmt;
+  if (horizontal)
+      fmt = "map = texture2D(baseimage, gl_TexCoord[0].st + vec2(%f,0.0));\n";
+  else
+      fmt = "map = texture2D(baseimage, gl_TexCoord[0].st + vec2(0.0,%f));\n";
 
-      kernelptr[c] = (float) ((1.0 /  (2.0 * M_PI * sigma * sigma)) * exp(- double(dx*dx + dy*dy) / (2.0 * sigma * sigma)));
-      offsetptr[c] = SbVec2f(float(x-center) * dt, float(y-center)*dt);
-      c++;
+  const char *fmt2 =
+#ifdef USE_NEGATIVE
+            "map = (map + vec4(1.0)) * 0.5;\n"
+#endif // USE_NEGATIVE
+#ifdef DISTRIBUTE_FACTOR
+            "map.xy += map.zw / DISTRIBUTE_FACTOR;\n"
+#endif
+            "m += map.xy * %f;\n";
 
-    }
+#ifdef USE_BOX_FILTER
+  float weight = 1.0f/(size*2+1);
+#else
+  float weight = gaussian(0,sigma2);
+#endif
+  str.sprintf(fmt, 0.0f);
+  fgen.addMainStatement(str);
+  str.sprintf(fmt2, weight);
+  fgen.addMainStatement(str);
+  for (int s = 0; s < size; s++) {
+    int d = size-s;
+#ifndef USE_BOX_FILTER
+    weight = gaussian(d, sigma2);
+#endif
+    float offset = float(d)*dt;
+    str.sprintf(fmt, offset);
+    fgen.addMainStatement(str);
+    str.sprintf(fmt2, weight);
+    fgen.addMainStatement(str);
+    str.sprintf(fmt, -offset);
+    fgen.addMainStatement(str);
+    str.sprintf(fmt2, weight);
+    fgen.addMainStatement(str);
   }
-  offset->value.finishEditing();
-  kernel->value.finishEditing();
+
+  fgen.addMainStatement(
+#ifdef DISTRIBUTE_FACTOR
+                        "vec2 f = fract(m * DISTRIBUTE_FACTOR);\n"
+
+#ifdef USE_NEGATIVE
+                        "gl_FragColor.rg = (m - (f / DISTRIBUTE_FACTOR)) * 2.0 - vec2(1.0, 1.0);\n"
+                        "gl_FragColor.ba = f * 2.0 - vec2(1.0, 1.0);\n"
+#else // USE_NEGATIVE
+                        "gl_FragColor.rg = m - (f / DISTRIBUTE_FACTOR);\n"
+                        "gl_FragColor.ba = f;\n"
+#endif // ! USE_NEGATIVE
+#else // DISTRIBUTE_FACTOR
+#ifdef USE_NEGATIVE
+                        "gl_FragColor = vec4(m.x*2.0 - 1.0, m.y*2.0 - 1.0, 0.0, 0.0);"
+#else // USE_NEGATIVE
+                        "gl_FragColor = vec4(m.x, m.y, 0.0, 0.0);"
+#endif // !USE_NEGATIVE
+#endif // !DISTRIBUTE_FACTOR
+          );
 
   program->shaderObject = vshader;
   program->shaderObject.set1Value(1, fshader);
@@ -2369,9 +2495,7 @@ SoShadowLightCache::createGaussFilter(const int texsize, const int size, const f
   fshader->sourceProgram = fgen.getShaderProgram();
   fshader->sourceType = SoShaderObject::GLSL_PROGRAM;
 
-  fshader->parameter.set1Value(0, offset);
-  fshader->parameter.set1Value(1, kernel);
-  fshader->parameter.set1Value(2, baseimage);
+  fshader->parameter = baseimage;
 
   SoShaderGenerator vgen;
   vgen.addMainStatement("gl_TexCoord[0] = gl_Vertex;\n");
@@ -2384,7 +2508,7 @@ SoShadowLightCache::createGaussFilter(const int texsize, const int size, const f
 }
 
 SoSeparator *
-SoShadowLightCache::createGaussSG(SoShaderProgram * program, SoSceneTexture2 * tex)
+SoShadowLightCache::createGaussSG(float smoothing, bool horizontal, SoSceneTexture2 * tex)
 {
   SoSeparator * sep = new SoSeparator;
   SoOrthographicCamera * camera = new SoOrthographicCamera;
@@ -2415,6 +2539,8 @@ SoShadowLightCache::createGaussSG(SoShaderProgram * program, SoSceneTexture2 * t
   sep->addChild(unit);
 
   sep->addChild(tex);
+
+  SoShaderProgram *program = createGaussFilter(smoothing, horizontal);
   sep->addChild(program);
 
   SoCoordinate3 * coord = new SoCoordinate3;
-- 
2.23.0

